apply plugin: "com.android.application"
apply plugin: 'kotlin-android'

import com.android.build.OutputFile

project.ext.react = [
  bundleInDebug: false,
  bundleInRelease: true,
  nodeExecutableAndArgs: ["/usr/local/bin/node"],
  enableHermes: true,
  inputExcludes: ["android/**", "ios/**"],
];

apply from: "../../node_modules/react-native/react.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

/**
 * The preferred build flavor of JavaScriptCore.
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US.  Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc-intl:+'

/**
 * Whether to enable the Hermes VM.
 *
 * This should be set on project.ext.react and mirrored here.  If it is not set
 * on project.ext.react, JavaScript will not be compiled to Hermes Bytecode
 * and the benefits of using Hermes will therefore be sharply reduced.
 */
def enableHermes = project.ext.react.get("enableHermes", false);

repositories {
  mavenCentral {
    content {
      excludeGroup "com.facebook.react"
    }
  }
}

gradle.projectsEvaluated {
  tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:all"
    //options.compilerArgs << "-Xlint:all" << "-Werror"
  }
}

android {
  kotlinOptions.useIR = true

  buildFeatures {
    viewBinding true
  }

  compileSdkVersion 30
  buildToolsVersion "30.0.2"

  compileOptions {
    sourceCompatibility 1.8
    targetCompatibility 1.8
  }

  defaultConfig {
    applicationId "com.reanimatederror.example"
    minSdkVersion 22
    targetSdkVersion 30
    versionCode 110000
    versionName "1.0.0"
    setProperty("archivesBaseName", "ReanimatedExample-$versionName-$versionCode")
    
    //ndk {
    //  abiFilters "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
    //}
    
    manifestPlaceholders = [manifestApplicationId: "${applicationId}"]
    vectorDrawables.useSupportLibrary = true
  }
  splits {
    abi {
      reset()
      enable enableSeparateBuildPerCPUArchitecture
      universalApk false  // If true, also generate a universal APK
      include "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
    }
  }

  lintOptions {
    checkReleaseBuilds true
  }
  
  // applicationVariants are e.g. debug, release
  applicationVariants.all { variant ->
    variant.outputs.each { output ->
      // For each separate APK per architecture, set a unique version code as described here:
      // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
      def versionCodes = ["armeabi-v7a": 1, "x86": 2, "arm64-v8a": 3, "x86_64": 4]
      def abi = output.getFilter(OutputFile.ABI)
      if (abi != null) {  // null for the universal-debug, universal-release variants
        output.versionCodeOverride = defaultConfig.versionCode * 1000 + versionCodes.get(abi)
      }
    }
  }

  buildTypes {
    debug {
      versionNameSuffix "-DEBUG"
    }
    release {
      minifyEnabled enableProguardInReleaseBuilds
    }
  }

  packagingOptions {
    //pickFirst "lib/armeabi-v7a/libc++_shared.so"
    //pickFirst "lib/arm64-v8a/libc++_shared.so"
    //pickFirst "lib/x86/libc++_shared.so"
    //pickFirst "lib/x86_64/libc++_shared.so"
    // exclude ARMEABI native so file, ARMEABI has been removed in NDK r17.
    exclude "lib/armeabi/**"
  }
}

dependencies {
  implementation(fileTree(include: ["*.jar"], dir: "libs"))
  implementation "com.facebook.react:react-native:+"

  implementation("androidx.preference:preference:1.1.0")
  implementation("androidx.appcompat:appcompat:1.1.0")
  implementation("androidx.activity:activity:1.3.1")

  testImplementation("junit:junit:4.13")

  androidTestImplementation("androidx.annotation:annotation:1.2.0")
  androidTestImplementation("androidx.test:runner:1.4.0")
  implementation("androidx.core:core-ktx:+")

  implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version") {
    transitive = false
  }

  if (enableHermes) {
    def hermesPath = "../../node_modules/hermes-engine/android/";
    debugImplementation files(hermesPath + "hermes-debug.aar")
    releaseImplementation files(hermesPath + "hermes-release.aar")
  } else {
    implementation jscFlavor
  }
}

configurations.all {
  resolutionStrategy {
    force "com.facebook.soloader:soloader:0.10.1", "androidx.core:core-ktx:1.6.0"
  }
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
  from configurations.compile
  into "libs"
}

tasks.whenTaskAdded { task ->
  if (task.name.startsWith("merge") && task.name.endsWith("ReleaseResources")) {
    task.doFirst {
      println "Delete ${rootDir}/app/build/generated/res/react/"
      delete "${rootDir}/app/build/generated/res/react/"
    }
  }
}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)